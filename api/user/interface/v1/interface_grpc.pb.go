// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: user/interface/v1/interface.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserInterface_Login_FullMethodName    = "/server.user.interface.v1.UserInterface/Login"
	UserInterface_GetNonce_FullMethodName = "/server.user.interface.v1.UserInterface/GetNonce"
)

// UserInterfaceClient is the client API for UserInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInterfaceClient interface {
	// 用户登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 获取 Nonce
	GetNonce(ctx context.Context, in *GetNonceReq, opts ...grpc.CallOption) (*GetNonceReply, error)
}

type userInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInterfaceClient(cc grpc.ClientConnInterface) UserInterfaceClient {
	return &userInterfaceClient{cc}
}

func (c *userInterfaceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, UserInterface_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInterfaceClient) GetNonce(ctx context.Context, in *GetNonceReq, opts ...grpc.CallOption) (*GetNonceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNonceReply)
	err := c.cc.Invoke(ctx, UserInterface_GetNonce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInterfaceServer is the server API for UserInterface service.
// All implementations must embed UnimplementedUserInterfaceServer
// for forward compatibility.
type UserInterfaceServer interface {
	// 用户登录
	Login(context.Context, *LoginReq) (*LoginReply, error)
	// 获取 Nonce
	GetNonce(context.Context, *GetNonceReq) (*GetNonceReply, error)
	mustEmbedUnimplementedUserInterfaceServer()
}

// UnimplementedUserInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserInterfaceServer struct{}

func (UnimplementedUserInterfaceServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserInterfaceServer) GetNonce(context.Context, *GetNonceReq) (*GetNonceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonce not implemented")
}
func (UnimplementedUserInterfaceServer) mustEmbedUnimplementedUserInterfaceServer() {}
func (UnimplementedUserInterfaceServer) testEmbeddedByValue()                       {}

// UnsafeUserInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInterfaceServer will
// result in compilation errors.
type UnsafeUserInterfaceServer interface {
	mustEmbedUnimplementedUserInterfaceServer()
}

func RegisterUserInterfaceServer(s grpc.ServiceRegistrar, srv UserInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedUserInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserInterface_ServiceDesc, srv)
}

func _UserInterface_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInterfaceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInterface_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInterfaceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInterface_GetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNonceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInterfaceServer).GetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInterface_GetNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInterfaceServer).GetNonce(ctx, req.(*GetNonceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInterface_ServiceDesc is the grpc.ServiceDesc for UserInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.user.interface.v1.UserInterface",
	HandlerType: (*UserInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserInterface_Login_Handler,
		},
		{
			MethodName: "GetNonce",
			Handler:    _UserInterface_GetNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/interface/v1/interface.proto",
}
