// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.29.3
// source: user/interface/v1/interface.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserInterfaceGetNonce = "/server.user.interface.v1.UserInterface/GetNonce"
const OperationUserInterfaceLogin = "/server.user.interface.v1.UserInterface/Login"

type UserInterfaceHTTPServer interface {
	// GetNonce 获取 Nonce
	GetNonce(context.Context, *GetNonceReq) (*GetNonceReply, error)
	// Login 用户登录
	Login(context.Context, *LoginReq) (*LoginReply, error)
}

func RegisterUserInterfaceHTTPServer(s *http.Server, srv UserInterfaceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/login", _UserInterface_Login0_HTTP_Handler(srv))
	r.GET("/v1/user/nonce", _UserInterface_GetNonce0_HTTP_Handler(srv))
}

func _UserInterface_Login0_HTTP_Handler(srv UserInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserInterfaceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _UserInterface_GetNonce0_HTTP_Handler(srv UserInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNonceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserInterfaceGetNonce)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNonce(ctx, req.(*GetNonceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNonceReply)
		return ctx.Result(200, reply)
	}
}

type UserInterfaceHTTPClient interface {
	GetNonce(ctx context.Context, req *GetNonceReq, opts ...http.CallOption) (rsp *GetNonceReply, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
}

type UserInterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserInterfaceHTTPClient(client *http.Client) UserInterfaceHTTPClient {
	return &UserInterfaceHTTPClientImpl{client}
}

func (c *UserInterfaceHTTPClientImpl) GetNonce(ctx context.Context, in *GetNonceReq, opts ...http.CallOption) (*GetNonceReply, error) {
	var out GetNonceReply
	pattern := "/v1/user/nonce"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserInterfaceGetNonce))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserInterfaceHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserInterfaceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
